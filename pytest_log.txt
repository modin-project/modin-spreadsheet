(ipysheet) richard@Richards-MacBook-Pro qgrid % pytest   
======================================================= test session starts ========================================================
platform darwin -- Python 3.8.5, pytest-6.1.2, py-1.9.0, pluggy-0.13.1
rootdir: /Users/richard/Documents/modin-spreadsheet/qgrid
collected 27 items                                                                                                                 

qgrid/tests/test_grid.py .F......F...F....F.F.......                                                                         [100%]

============================================================= FAILURES =============================================================
_____________________________________________________ test_edit_multi_index_df _____________________________________________________

    def test_edit_multi_index_df():
        df_multi = create_multi_index_df()
        df_multi.index.set_names("first", level=0, inplace=True)
        view = QgridWidget(df=df_multi)
        old_val = df_multi.loc[("bar", "two"), 1]
    
        check_edit_success(
            view,
            1,
            1,
            old_val,
>           round(old_val, pd.get_option("display.precision") - 1),
            3.45678,
            3.45678,
        )
E       AttributeError: module 'modin.pandas' has no attribute 'get_option'

qgrid/tests/test_grid.py:87: AttributeError
____________________________________________________ test_period_object_column _____________________________________________________

    def test_period_object_column():
        range_index = pd.period_range(start="2000", periods=10, freq="B")
        df = pd.DataFrame({"a": 5, "b": range_index}, index=range_index)
>       view = QgridWidget(df=df)

qgrid/tests/test_grid.py:241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
qgrid/grid.py:632: in __init__
    self._update_df()
qgrid/grid.py:825: in _update_df
    self._update_table(update_columns=True, fire_data_change_event=False)
qgrid/grid.py:1040: in _update_table
    series_to_set = self._get_col_series_from_df(
../../CS262/modin/modin/pandas/series.py:1432: in to_timestamp
    return self._default_to_pandas("to_timestamp", freq=freq, how=how, copy=copy)
../../CS262/modin/modin/pandas/base.py:377: in _default_to_pandas
    result = getattr(getattr(pandas, type(self).__name__), op)(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 2000-01-03    2000-01-03
2000-01-04    2000-01-04
2000-01-05    2000-01-05
2000-01-06    2000-01-06
2000-01-07    2000...1-11    2000-01-11
2000-01-12    2000-01-12
2000-01-13    2000-01-13
2000-01-14    2000-01-14
Name: b, dtype: period[B]
freq = None, how = 'start', copy = True

    def to_timestamp(self, freq=None, how="start", copy=True) -> "Series":
        """
        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
    
        Parameters
        ----------
        freq : str, default frequency of PeriodIndex
            Desired frequency.
        how : {'s', 'e', 'start', 'end'}
            Convention for converting period to timestamp; start of period
            vs. end.
        copy : bool, default True
            Whether or not to return a copy.
    
        Returns
        -------
        Series with DatetimeIndex
        """
        new_values = self._values
        if copy:
            new_values = new_values.copy()
    
        if not isinstance(self.index, PeriodIndex):
>           raise TypeError(f"unsupported Type {type(self.index).__name__}")
E           TypeError: unsupported Type Index

../../../.pyenv/versions/3.8.5/envs/ipysheet/lib/python3.8/site-packages/pandas/core/series.py:4923: TypeError
_________________________________________________________ test_date_index __________________________________________________________

    def test_date_index():
        df = create_df()
        df.set_index("Date", inplace=True)
        view = QgridWidget(df=df)
>       view._handle_qgrid_msg_helper(
            {
                "type": "change_filter",
                "field": "A",
                "filter_info": {
                    "field": "A",
                    "type": "slider",
                    "min": 2,
                    "max": 3,
                },
            }
        )

qgrid/tests/test_grid.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
qgrid/grid.py:1561: in _handle_qgrid_msg_helper
    self._handle_change_filter(content)
qgrid/grid.py:1425: in _handle_change_filter
    self._update_table(triggered_by='change_filter')
qgrid/grid.py:870: in _update_table
    df = df.iloc[from_index:to_index]
../../CS262/modin/modin/pandas/indexing.py:642: in __getitem__
    result = super(_iLocIndexer, self).__getitem__(row_lookup, col_lookup, ndim)
../../CS262/modin/modin/pandas/indexing.py:277: in __getitem__
    qc_view = self.qc.view(row_lookup, col_lookup)
../../CS262/modin/modin/backends/pandas/query_compiler.py:2764: in view
    self._modin_frame.mask(row_numeric_idx=index, col_numeric_idx=columns)
../../CS262/modin/modin/engines/base/frame/data.py:479: in mask
    row_partitions_list = self._get_dict_of_block_index(0, row_numeric_idx)
../../CS262/modin/modin/engines/base/frame/data.py:810: in _get_dict_of_block_index
    self._get_dict_of_block_index(axis, [indices.stop]).items()
../../CS262/modin/modin/engines/base/frame/data.py:864: in _get_dict_of_block_index
    cumulative = np.append(bins[:-1].cumsum(), np.iinfo(bins.dtype).max)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = iinfo(min=-9223372036854775808, max=9223372036854775807, dtype=float64), int_type = dtype('float64')

    def __init__(self, int_type):
        try:
            self.dtype = numeric.dtype(int_type)
        except TypeError:
            self.dtype = numeric.dtype(type(int_type))
        self.kind = self.dtype.kind
        self.bits = self.dtype.itemsize * 8
        self.key = "%s%d" % (self.kind, self.bits)
        if self.kind not in 'iu':
>           raise ValueError("Invalid integer data type %r." % (self.kind,))
E           ValueError: Invalid integer data type 'f'.

../../../.pyenv/versions/3.8.5/envs/ipysheet/lib/python3.8/site-packages/numpy/core/getlimits.py:507: ValueError
________________________________________________________ test_object_dtype _________________________________________________________

    def test_object_dtype():
        df = pd.DataFrame({"a": my_object_vals}, index=my_object_vals)
        widget = QgridWidget(df=df)
        grid_data = json.loads(widget._df_json)["data"]
    
        widget._handle_qgrid_msg_helper(
            {"type": "show_filter_dropdown", "field": "a", "search_val": None}
        )
>       widget._handle_qgrid_msg_helper(
            {
                "field": "a",
                "filter_info": {
                    "field": "a",
                    "selected": [0, 1],
                    "type": "text",
                    "excluded": [],
                },
                "type": "change_filter",
            }
        )

qgrid/tests/test_grid.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
qgrid/grid.py:1561: in _handle_qgrid_msg_helper
    self._handle_change_filter(content)
qgrid/grid.py:1416: in _handle_change_filter
    self._df = self._unfiltered_df[combined_condition].copy()
../../CS262/modin/modin/pandas/base.py:2553: in __getitem__
    return self._getitem(key)
../../CS262/modin/modin/pandas/dataframe.py:2485: in _getitem
    query_compiler=self._query_compiler.getitem_array(key._query_compiler)
../../CS262/modin/modin/backends/pandas/query_compiler.py:2095: in getitem_array
    key = key.to_pandas().squeeze(axis=1)
../../CS262/modin/modin/backends/pandas/query_compiler.py:199: in to_pandas
    return self._modin_frame.to_pandas()
../../CS262/modin/modin/engines/base/frame/data.py:1897: in to_pandas
    ErrorMessage.catch_bugs_and_request_email(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'modin.error_message.ErrorMessage'>, failure_condition = True
extra_log = 'Internal and external indices on axis 0 do not match.'

    @classmethod
    def catch_bugs_and_request_email(cls, failure_condition, extra_log=""):
        if failure_condition:
>           raise Exception(
                "Internal Error. "
                "Please email bug_reports@modin.org with the traceback and command that"
                " caused this error.\n{}".format(extra_log)
            )
E           Exception: Internal Error. Please email bug_reports@modin.org with the traceback and command that caused this error.
E           Internal and external indices on axis 0 do not match.

../../CS262/modin/modin/error_message.py:60: Exception
------------------------------------------------------- Captured stderr call -------------------------------------------------------
(pid=16207) RuntimeWarning: '<' not supported between instances of 'MyObject' and 'MyObject', sort order is undefined for incomparable objects
__________________________________________________ test_object_dtype_categorical ___________________________________________________

    def test_object_dtype_categorical():
        cat_series = pd.Series(
            pd.Categorical(my_object_vals, categories=my_object_vals)
        )
        widget = show_grid(cat_series)
>       constraints_enum = widget._columns[0]["constraints"]["enum"]
E       KeyError: 'constraints'

qgrid/tests/test_grid.py:554: KeyError
========================================================= warnings summary =========================================================
../../CS262/modin/modin/pandas/iterator.py:16
  DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working

../../../.pyenv/versions/3.8.5/envs/ipysheet/lib/python3.8/site-packages/ipywidgets/widgets/widget.py:282
  DeprecationWarning: Widget registration using a string name has been deprecated. Widget registration now uses a plain `@register` decorator.

qgrid/grid.py:578
  DeprecationWarning: metadata {'sync': True} was set from the constructor. With traitlets 4.1, metadata should be set using the .tag() method, e.g., Int().tag(key1='value1', key2='value2')

qgrid/tests/test_grid.py: 12 warnings
  UserWarning: Distributing <class 'int'> object. This may take some time.

qgrid/tests/test_grid.py: 19 warnings
  UserWarning: Distributing <class 'dict'> object. This may take some time.

qgrid/tests/test_grid.py::test_edit_date
  DeprecationWarning: QgridWidget._df_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.

qgrid/tests/test_grid.py::test_edit_date
  UserWarning: `DataFrame.to_json` defaulting to pandas implementation.
  To request implementation, send an email to feature_requests@modin.org.

qgrid/tests/test_grid.py: 30 warnings
  DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.

qgrid/tests/test_grid.py: 31 warnings
  UserWarning: `DataFrame.to_json` defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_edit_multi_index_df
qgrid/tests/test_grid.py::test_multi_index
qgrid/tests/test_grid.py::test_change_viewport
qgrid/tests/test_grid.py::test_change_filter_viewport
qgrid/tests/test_grid.py::test_change_selection
  UserWarning: Distributing <class 'numpy.ndarray'> object. This may take some time.

qgrid/tests/test_grid.py::test_mixed_type_column
qgrid/tests/test_grid.py::test_nans
qgrid/tests/test_grid.py::test_multi_index
  UserWarning: sort_values defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_nans
qgrid/tests/test_grid.py::test_interval_index
qgrid/tests/test_grid.py::test_multi_interval_index
  UserWarning: Distributing <class 'list'> object. This may take some time.

qgrid/tests/test_grid.py::test_nans
qgrid/tests/test_grid.py::test_object_dtype_categorical
  UserWarning: `DataFrame.setitem_without_string_columns` defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_nans
qgrid/tests/test_grid.py::test_date_index
qgrid/tests/test_grid.py::test_object_dtype_categorical
  UserWarning: Distributing <class 'pandas.core.frame.DataFrame'> object. This may take some time.

qgrid/tests/test_grid.py::test_period_object_column
  UserWarning: `Series.to_timestamp` defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_date_index
  UserWarning: `DataFrame.copy` for empty DataFrame defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_multi_index
  UserWarning: Distributing <class 'pandas.core.indexes.base.Index'> object. This may take some time.

qgrid/tests/test_grid.py::test_multi_index
  UserWarning: <function DataFrame.reset_index at 0x10b3153a0> defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_multi_index
  UserWarning: <function DataFrame.sort_index at 0x10b3158b0> defaulting to pandas implementation.

qgrid/tests/test_grid.py::test_object_dtype_categorical
  UserWarning: Distributing <class 'pandas.core.arrays.categorical.Categorical'> object. This may take some time.

qgrid/tests/test_grid.py::test_object_dtype_categorical
  DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats

-- Docs: https://docs.pytest.org/en/stable/warnings.html
===================================================== short test summary info ======================================================
FAILED qgrid/tests/test_grid.py::test_edit_multi_index_df - AttributeError: module 'modin.pandas' has no attribute 'get_option'
FAILED qgrid/tests/test_grid.py::test_period_object_column - TypeError: unsupported Type Index
FAILED qgrid/tests/test_grid.py::test_date_index - ValueError: Invalid integer data type 'f'.
FAILED qgrid/tests/test_grid.py::test_object_dtype - Exception: Internal Error. Please email bug_reports@modin.org with the trace...
FAILED qgrid/tests/test_grid.py::test_object_dtype_categorical - KeyError: 'constraints'
